
일전에 작성했던 스택 코드로 왜 제네릭 타입으로 만들어야 하는지 알아보자.
아래 코드를 보자.
```
public class Stack {
    private Object[] elements;
    private int size = 0;
    private static final int DEFAULT_INITIAL_CAPACITY = 16;
    
    public Stack(){
        elements = new Object[DEFAULT_INITIAL_CAPACITY];
    }

    public void push(Object e) {
        ensureCapacity();
        elements[size++] = e;
    }

    public Object pop() {
        if (size == 0)
            throw new EmptyStackException();
        Object result = elements[--size];
        elements[size] = null;
        return result;
    }

    public boolean isEmpty(){
        return size == 0;
    }

    private void ensureCapacity() {
        if (elements.length == size) {
            elements = Arrays.copyOf(elements, 2 * size + 1);
        }
    }
}
```
스택 코드에서 pop을 했다고 생각해보자. 우리가 원하는 타입의 변수가 나올 것이라고 장담할 수 없다. 따라서 이 클래스는 제네릭이어야 한다.

```
public class GenericStack<E> {
    private E[] elements;
    private int size = 0;
    private static final int DEFAULT_INITIAL_CAPACITY = 16;

    public GenericStack(){
        elements = new E[DEFAULT_INITIAL_CAPACITY];
    }

    public void push(E e) {
        ensureCapacity();
        elements[size++] = e;
    }

    public E pop() {
        if (size == 0)
            throw new EmptyStackException();
        E result = elements[--size];
        elements[size] = null;
        return result;
    }

    public boolean isEmpty(){
        return size == 0;
    }

    private void ensureCapacity() {
        if (elements.length == size) {
            elements = Arrays.copyOf(elements, 2 * size + 1);
        }
    }
}
```
이렇게 작성하려고 하면 약 7번째줄에 new E[DEFAULT_INITIAL_CAPACIT];
부분에서 에러가 난다.

![에러](images/genericError.png "이미지 설명(title)")

 실체화 불가 타입인 제네릭으로는 배열을 만들 수 없기 때문인데 해결책은 두 가지가 있다.<br>

1. Object 배열을 만들고 제네릭 배열로 형변환을 한다.
2. elements 필드의 타입을 E[] 에서 Object[]로 바꾼다.

첫 번째부터 보자.
```
public GenericStack(){
        elements = (E[]) new Object[DEFAULT_INITIAL_CAPACITY];
    }
```
에러가 난 부분의 타입을 Object로 선언하고 형을 바꿔줬다.
컴파일러는 이 부분을 확인할 수 없고 우리가 보장해줘야 한다.
elements는 private이고 반환되거나 전달되는 일이 없기 때문에 push 메서드에 의해 삽입되는 타입이 항상 E이기 때문에 안전성이 보장된 코드다.
![에러2](images/SuppressWarning.png "이미지 설명(title)")

이건 @SuppressWarnings 에너테이션을 사용해 숨긴다.

두 번째를 보면 elements 필드의 타입을 E[]에서 Object[]로 바꾸는 것이다.
```
public class SecondGenericStack<E> {
    private Object[] elements;
    private int size = 0;
    private static final int DEFAULT_INITIAL_CAPACITY = 16;

    public SecondGenericStack(){
        elements = new Object[DEFAULT_INITIAL_CAPACITY];
    }

    public void push(Object e) {
        ensureCapacity();
        elements[size++] = e;
    }

    public Object pop() {
        if (size == 0)
            throw new EmptyStackException();

        @SuppressWarnings("unchecked")
        Object result = (E) elements[--size];

        elements[size] = null;
        return result;
    }

    public boolean isEmpty(){
        return size == 0;
    }

    private void ensureCapacity() {
        if (elements.length == size) {
            elements = Arrays.copyOf(elements, 2 * size + 1);
        }
    }
}
```

pop할 때 return해주는 부분에서 E로 형변환을 하면 우리가 직접 증명하고 경고를 숨길 수 있다.

첫번째 방식은 형변환을 배열 생성시 한 번만 해주면 되지만 두번째는 배열에서 원소를 읽을때마다 해줘야 한다. 따라서 현업에서는 첫 번째 방식이 선호된다. 

하지만 배열의 런타임 타입과 컴파일 타입이 달라 힙 오염이 일어나는데 컴파일 타임과 런타임의 정보가 달라서 발생하는 문제로 (아이템 32에서 이야기한다.) 두 번째 방식을 사용하기도 한다. 실제로 자바에서 많이 사용하는 컬렉션에서는 두 번째 방식을 많이 사용한다.

위에서 작성한 스택은 타입 매개변수에 제약을 두지 않은 것이지만 제약을 두는 제네릭 타입도 있다. 이를 한정적 타입 매개변수라고 하는데


예를 들어 java.util.concurrent.DelayQueue는 다음과 같이 선언되어 있다.
```
class DelayQueue<E extends Delayed> implements BlockingQuque<E>
```
이건 Delayed 본인과 하위 타입만 매개변수로 제한하겠다는 이야기다.
추가로
```
class DelayQueue<E super Delayed> implements BlockingQuque<E>
```
라고 하면 자기 자신과 상위 타입만 매개변수로 가지고 싶다는 이야기입니다.
